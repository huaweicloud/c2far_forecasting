"""Standard loss functions that can be used inside of TransformLoss to
compute the loss between the generated guesses and the original
values.

License:
    MIT License

    Copyright (c) 2023 HUAWEI CLOUD

"""
# sutranets/ml/loss_functions/standard_losses.py
import torch
TOLERANCE = 1e-6


class MPELoss():
    """Simple loss function based on the Mean Percentage Error.

    """
    @staticmethod
    def __call__(generated, originals):
        # MPE = 100 * mean (diffs) / (y + yhat)/2
        nums = (generated - originals).float()
        denoms = (generated + originals) / 2.0
        denoms[denoms == 0] = 1
        err = 100 * (nums / denoms).mean()
        return err


class SMAPELoss():
    """Simple loss function based on the SMAPE.

    """
    @staticmethod
    def __call__(generated, originals):
        # SMAPE = 100 * mean (abs_diff) / (y + yhat)/2
        nums = torch.abs(generated - originals).float()
        denoms = (torch.abs(generated) + torch.abs(originals)) / 2.0
        denoms[denoms == 0] = 1
        err = 100 * (nums / denoms).mean()
        return err


class NDNormalizer():
    """Simply compute the average of the originals, for the purposes of
    globally normalizing the MAE to give us ND.

    """
    @staticmethod
    def __call__(_, originals):
        return originals.mean()


class CoverageLoss():
    """How often the originals are within the low/high bounds returned by
    a multi-step-ahead generation evaluator.

    """
    @staticmethod
    def __call__(generated, originals):
        lows, highs = generated
        low_cov = lows <= originals + TOLERANCE
        high_cov = originals <= highs + TOLERANCE
        cov = low_cov & high_cov
        nelem = len(cov)
        cov_loss = 1 - (cov.sum() / nelem)
        return cov_loss


class CovWidthLoss():
    """Computes the average width between the low/high bounds returned by
    a multi-step-ahead generation evaluator.

    """
    @staticmethod
    def __call__(generated, _):
        lows, highs = generated
        cov_width = (highs - lows).mean()
        return cov_width


class WQLLoss():
    """Computes 2*pinball loss of the orginals versus every predicted
    quantile from 0.1 to 0.9 (in the data generated by a
    multi-step-ahead generation evaluator).  Returns the average.

    """
    @staticmethod
    def __call__(generated, originals):
        taus = [x / 10.0 for x in range(1, 10)]
        y = originals
        tot_plosses = 0
        for u, tau in zip(generated, taus):
            plosses = (y - u) * (tau - 1.0*(y < u))
            tot_plosses += plosses.mean()
        ploss = 2.0 * tot_plosses / 9
        return ploss
