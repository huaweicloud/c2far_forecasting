"""Utilities for doing batch predictions.

License:
    MIT License

    Copyright (c) 2023 HUAWEI CLOUD

"""
# sutranets/ml/batch_predictor_utils.py
import torch
from sutranets.ml.constants import ConfidenceFlags


class BatchPredictorUtils():
    """Static utilities for doing batch prediction.

    """
    @classmethod
    def make_ptiles(cls, confidence, nsamples, gsize, all_gen):
        """Turn all the generated rollouts into percentiles.

        """
        all_gen = all_gen.reshape(-1, nsamples, gsize)
        if confidence > 0 and confidence < 100:
            ptiles = cls.__get_ptile_triple(confidence, all_gen)
        elif confidence == ConfidenceFlags.WQL_QTILES.value:
            ptiles = cls.__get_wql_qtiles(all_gen)
        elif confidence is None:
            ptiles = None
        else:
            msg = f"Undefined or unusable confidence value: {confidence}"
            raise RuntimeError(msg)
        if ptiles is None:
            raise RuntimeError(f"Invalid confidence value{confidence}")
        return ptiles

    @staticmethod
    def __compute_qtiles(all_gen, qths):
        """Compute all the quantiles in qths over all_gen.

        """
        qths = torch.tensor(qths, device=all_gen.device)
        return torch.quantile(all_gen, qths, axis=1)

    @classmethod
    def __get_wql_qtiles(cls, all_gen):
        """Helper to compute the quantiles at 0.1, 0.2, ..., 0.9.

        """
        qths = [n/10.0 for n in range(1, 10)]
        return cls.__compute_qtiles(all_gen, qths)

    @classmethod
    def __get_ptile_triple(cls, confidence, all_gen):
        """Helper to compute the lows/p50s/highs percentiles.

        """
        ptile_low = (100 - confidence) / 2.0
        ptile_high = 100 - ptile_low
        qths = [p/100.0 for p in [ptile_low, 50, ptile_high]]
        return cls.__compute_qtiles(all_gen, qths)

    @staticmethod
    def prep_batch_pred_inputs(origs, csize, gsize):
        """Helper to prepare and reshape the originals to be a list of nbatch
        sequences, each truncated at the given csize.

        """
        if len(origs) != csize + gsize + 2:
            msg = f"Using originals {origs.shape} that do not " \
                  f"match given csize/gsize {csize}/{gsize}"
            raise RuntimeError(msg)
        origs = origs[:csize + 2]
        origs = origs.squeeze(2).transpose(0, 1)
        return origs

    @staticmethod
    def prep_batch_pred_outputs(ptiles, csize, gsize, device):
        """Helper to prepare and reshape the percentiles, generated by a
        BatchPredictor, into a format that is more amenable to
        evaluation/loss/criterions.

        """
        preds = torch.permute(ptiles, (2, 1, 0))
        _, nbatch, nptiles = preds.shape
        nseq = csize + gsize
        outputs = torch.zeros(nseq, nbatch, nptiles, device=device)
        outputs[-gsize:, :, :] = preds
        return outputs
